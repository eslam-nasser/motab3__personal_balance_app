{% extends 'layout.twig' %}

{% block body %}
	<div id="app">


		<div class="container add-form">
			<div class="form-badge"><img src="/img/icons/safebox.svg"></div>
			<div class="form">
				<div class="alert alert-danger" style="display: none"></div>
				<div class="loader" v-if="sending == true"></div>

				<label>From?</label>
				<input type="text" name="from" autofocus v-model="newIncome.from">

				<label>Notes</label>
				<textarea name="notes" rows="8" v-model="newIncome.notes"></textarea>

				<label>How much did you received?</label>
				<input type="number" name="amount" v-model="newIncome.amount">

	            <label>Where is the money?</label>
	            <div class="types">
	                <label for="cash" class="type">
	                    <input type="radio" id="cash" name="where" value="cash" v-model="newIncome.where">
	                    <div class="color-layer"></div>
	                    <span>Cash</span>
	                </label>
	                <label id="bank" class="type">
	                    <input type="radio" id="bank" name="where" value="bank" v-model="newIncome.bank" checked>
	                    <div class="color-layer"></div>
	                    <span>Bank</span>
	                </label>
	                <label id="creditor" class="type">
	                    <input type="radio" id="creditor" name="where" value="creditor" v-model="newIncome.where">
	                    <div class="color-layer"></div>
	                    <span>Creditor</span>
	                </label>
	            </div>

				<button type="submit" @click="add">Submit</button>
	        </div>
			<button class="view-logs" @click="showLogs">View your income logs</button>
		</div>


		<div class="logs" style="display: none;opacity: 0;top: -100px">
			<div class="loader" v-if="loading"></div>
			<div class="log" v-for="income in data">
				<span class="date">${income.createdAt | formatDate}</span>
				<span class="days-counter">${income.where}</span>
				<span class="amount">${income.amount | formatMoney}</span>
				<button>Details</button>
			</div>
			<!--/-->
		</div>


	</div><!--/#app-->
{% endblock %}



{% block js %}
    <script src="/js/jquery.min.js" charset="utf-8"></script>
    <script src="/js/vue.min.js" charset="utf-8"></script>
    <script src="/js/axios.min.js" charset="utf-8"></script>
    <script src="/js/moment.js" charset="utf-8"></script>
    <script type="text/javascript">
		const api = window.location.origin
        var app = new Vue({
            delimiters: ['${', '}'],
            el: '#app',
            data: {
                data: [],
				newIncome: {
					from: '',
					notes: '',
					amount: 1,
					where: 'cash'
				},
				sending: false,
				loading: false
			},
			mounted(){
				//
			},
			methods: {
				getData(){
					this.loading = true;
					axios.get(`${api}/income/all`)
						.then((res) => {
							setTimeout(() => {
								this.loading = false;
								this.data = res.data;
							}, 1000)
						})
				},
				add(){
					if(this.newIncome.for == ''){
						return this.Err('You must write the money source!')
					}
					if(this.newIncome.amount < 1){
						return this.Err('wtf man!, write how much did yout earned!')
					}
					this.sending = true
					axios.post(`${api}/income/new`, this.newIncome)
						.then(res => {
							setTimeout(() => {
								this.newIncome.from = ''
								this.newIncome.notes = ''
								this.newIncome.amount = 1
								this.newIncome.where = 'cash'
								this.sending = false;
							}, 700)
						}).catch((err) => {
							console.log(err);
							this.Err(err)
						})
				},
				showLogs(e){
					this.getData()
					window.scrollTo(0, 0);
					$('.add-form').animate({
				        opacity: 0,
				        top: -100
				    }, function() {
				        $('.add-form').hide()
				        $('.logs').show()
				        $('.logs').animate({
				            opacity: 1,
				            top: 0
				        })
				    })
				},



				// Error handler
				Err(msg = 'Something missing!'){
					$('.alert').hide()
				    $('body,html').animate({
				        scrollTop: 0
				    }, 500);
				    $('.alert').text(msg)
				    $('.alert').slideDown()
				    setTimeout(() => {
				        $('.alert').slideUp()
				    }, 3000)
				    setTimeout(() => {
				        $('.alert').text('فيه بيانات ناقصة!')
				    }, 3500)
				}
			},
			filters: {
				getDaySum(arr){
					let x = arr.reduce((total, current, i, arr) => {
						return total + current.amount
					}, 0)
					return x;
				},
				getMonthSum(arr){
					let x = arr.reduce((total, current, i, arr) => {
						current.day_logs.forEach(item => {
							total += item.amount
						})
						return total
					}, 0)
					return x;
				},
				formatMoney(n){
				    return n.toFixed(1).replace(/(\d)(?=(\d{3})+\.)/g, '$1,');
				},
				formatDate(date){
					return moment(date).format('DD/MMMM/YYYY hh:mm:ss a');
				}
			},
		})
	</script>
{% endblock %}
